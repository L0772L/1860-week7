CHIP Counter {
    IN inc, reset;
    OUT out[16];

    PARTS:
    // Define a 16-bit register to store the current count value
    Register16(in=nextValue, load=inc, out=currentValue, out=out);

    // Use the Inc16 chip to increment the current value
    Inc16(in=currentValue, out=incrementedValue);

    // Multiplexer: When reset is high, output 0; otherwise, output the incremented value
    Mux16(a=incrementedValue, b=false, sel=reset, out=nextValue);
}
CHIP DisplayCounter<group number> {
    IN inc, reset;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Define a 4-bit counter
    Counter4(in=inc, reset=reset, out=count);

    // Use a decoder to convert the counter's output to 7-segment display signals
    Decoder4to7(in=count, out=a, out=b, out=c, out=d, out=e, out=f, out=g);
}
CHIP MultiDisplayCounter<group number> {
    IN inc, reset;
    OUT DigitA[7], DigitB[7];

    PARTS:
    // Define an 8-bit counter
    Counter8(in=inc, reset=reset, out=count);

    // Split the 8-bit counter output into high and low nibbles
    Split8(in=count, out=lowNibble, out=highNibble);

    // Use a decoder to convert the low nibble to the first 7-segment display signals
    Decoder4to7(in=lowNibble, out=DigitA);

    // Use a decoder to convert the high nibble to the second 7-segment display signals
    Decoder4to7(in=highNibble, out=DigitB);
}